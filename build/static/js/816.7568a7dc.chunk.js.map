{"version":3,"file":"static/js/816.7568a7dc.chunk.js","mappings":"8PASO,MAAMA,EAAmBA,KAAgB,IAADC,EAE7C,MACoB,qBAAXC,QACPA,OAAOC,eAAe,eAEN,QADhBF,EACAC,OAAOE,iBAAS,IAAAH,OAAA,EAAhBA,EAAkBD,mBAAkB,EAS3BK,EAA4BC,UACvC,IACE,IAAIN,IAkCF,QAAKO,UAAUC,aAIR,IAAIC,SAASC,IAClBH,UAAUC,YAAYG,oBACpB,IAAMD,GAAQ,KACbE,KACCC,EAAAA,EAAAA,IAAY,4BAA6B,CACvCC,QAAS,uCACTC,KAAMH,EAAMG,KACZC,QAASJ,EAAME,UAEjBJ,GAAQ,EAAM,GAEhB,CAAEO,QAAS,KACZ,IAhDH,IAGE,MAAM,YAAEC,EAAW,YAAEC,SAAsB,uCAG3C,GAAIA,EAAa,CACf,MAAMC,QAAyBD,EAAYE,MAAM,CAAEC,KAAM,gBACzD,GAA+B,WAA3BF,EAAiBG,OAAiD,oBAA3BH,EAAiBG,MAC1D,OAAO,EAGT,GAA+B,WAA3BH,EAAiBG,MAAoB,CAEvC,MAA+B,mBADHJ,EAAYK,QAAQ,CAAEF,KAAM,iBACnCC,KACvB,CAEA,MAAkC,YAA3BH,EAAiBG,KAC1B,CAIA,aADML,EAAYP,sBACX,CACT,CAAE,MAAOC,GAKP,OAJAC,EAAAA,EAAAA,IAAY,4BAA6B,CACvCC,QAAS,uEACTE,QAASJ,KAEJ,CACT,CAsBJ,CAAE,MAAOA,GAEP,OADAC,EAAAA,EAAAA,IAAY,4BAA6BD,IAClC,CACT,GASWa,EAAoBnB,UAK/B,IACE,MAAMoB,GAAcC,EAAAA,EAAAA,GAAA,CAClBC,oBAAoB,EACpBX,QAAS,IACTY,WAAY,GACTC,GAKL,UAD4BzB,IAG1B,OADAQ,EAAAA,EAAAA,IAAY,oBAAqB,8CAC1B,KAIT,IAAIb,IAmBF,OAAO,IAAIS,SAASC,IAClBH,UAAUC,YAAYG,oBACnBoB,IACCrB,EAAQ,CACNsB,IAAKD,EAASE,OAAOC,SACrBC,IAAKJ,EAASE,OAAOG,WACrB,IAEHxB,IACC,IAAIyB,EAAe,kEACnB,OAAQzB,EAAMG,MACZ,KAAKH,EAAM0B,kBACTD,EAAe,oDACf,MACF,KAAKzB,EAAM2B,qBACTF,EAAe,gDACf,MACF,KAAKzB,EAAM4B,QACTH,EAAe,4DAInBxB,EAAAA,EAAAA,IAAY,oBAAqB,CAC/BC,QAASuB,EACTtB,KAAMH,EAAMG,KACZC,QAASJ,EAAME,UAEjBJ,EAAQ,KAAK,GAEfgB,EACD,IAhDH,IAEE,MAAM,YAAER,SAAsB,uCACxBa,QAAiBb,EAAYP,mBAAmBe,GAEtD,MAAO,CACLM,IAAKD,EAASE,OAAOC,SACrBC,IAAKJ,EAASE,OAAOG,UAEzB,CAAE,MAAOxB,GAKP,OAJAC,EAAAA,EAAAA,IAAY,oBAAqB,CAC/BC,QAAS,oDACTE,QAASJ,IAEJ,IACT,CAoCJ,CAAE,MAAOA,GAEP,OADAC,EAAAA,EAAAA,IAAY,oBAAqBD,GAC1B,IACT,GAQW6B,EAA4BA,KACvC,IAAKzC,IAEH,MAAO,kKAGT,MAAM0C,EAAYnC,UAAUmC,UAAUC,cAEtC,OAAID,EAAUE,QAAQ,WAAa,GAAKF,EAAUE,QAAQ,SAAW,GAAKF,EAAUE,QAAQ,SAAW,EAE9F,mJAGA,2IACT,C","sources":["services/locationPermissionService.ts"],"sourcesContent":["import { logAppError } from './appStateService';\nimport { Coordinates } from './appStateService';\n\n/**\n * Service per gestire i permessi di geolocalizzazione su diverse piattaforme\n * Supporta sia il browser web che le piattaforme native (iOS/Android) via Capacitor\n */\n\n// Determina se l'app è in esecuzione come app nativa\nexport const isNativePlatform = (): boolean => {\n  // Verifica se il contesto è un'app Capacitor\n  return (\n    typeof window !== 'undefined' &&\n    window.hasOwnProperty('Capacitor') &&\n    // @ts-ignore - Capacitor è disponibile a runtime\n    window.Capacitor?.isNativePlatform()\n  );\n};\n\n/**\n * Chiede il permesso di geolocalizzazione all'utente\n * Gestisce sia browser che piattaforme native\n * @returns Promise<boolean> - true se il permesso è concesso, false altrimenti\n */\nexport const requestLocationPermission = async (): Promise<boolean> => {\n  try {\n    if (isNativePlatform()) {\n      // Se siamo su piattaforma nativa, dobbiamo usare i plugin di Capacitor\n      try {\n        // Tentiamo di importare dinamicamente il plugin (evitando errori se non installato)\n        // @ts-ignore - Import dinamico\n        const { Geolocation, Permissions } = await import('@capacitor/core');\n        \n        // Su iOS/Android, dobbiamo prima chiedere il permesso\n        if (Permissions) {\n          const permissionStatus = await Permissions.query({ name: 'geolocation' });\n          if (permissionStatus.state === 'denied' || permissionStatus.state === 'never_ask_again') {\n            return false;\n          }\n          \n          if (permissionStatus.state === 'prompt') {\n            const requestResult = await Permissions.request({ name: 'geolocation' });\n            return requestResult.state === 'granted';\n          }\n          \n          return permissionStatus.state === 'granted';\n        }\n        \n        // Fallback: proviamo a usare direttamente la geolocalizzazione\n        await Geolocation.getCurrentPosition();\n        return true;\n      } catch (error) {\n        logAppError('requestLocationPermission', {\n          message: 'Errore durante la richiesta del permesso di geolocalizzazione nativa',\n          details: error\n        });\n        return false;\n      }\n    } else {\n      // Su browser, il permesso viene richiesto automaticamente quando utilizziamo l'API\n      if (!navigator.geolocation) {\n        return false;\n      }\n      \n      return new Promise((resolve) => {\n        navigator.geolocation.getCurrentPosition(\n          () => resolve(true),\n          (error) => {\n            logAppError('requestLocationPermission', {\n              message: 'Permesso di geolocalizzazione negato',\n              code: error.code,\n              details: error.message\n            });\n            resolve(false);\n          },\n          { timeout: 5000 }\n        );\n      });\n    }\n  } catch (error) {\n    logAppError('requestLocationPermission', error);\n    return false;\n  }\n};\n\n/**\n * Ottiene le coordinate correnti dell'utente con gestione migliorata dei permessi\n * Funziona su browser, iOS e Android\n * @param options Opzioni aggiuntive (accuracy, timeout, ecc)\n * @returns Promise<Coordinates | null> - Coordinate o null se non disponibili\n */\nexport const getDeviceLocation = async (options?: {\n  enableHighAccuracy?: boolean;\n  timeout?: number;\n  maximumAge?: number;\n}): Promise<Coordinates | null> => {\n  try {\n    const defaultOptions = {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 0,\n      ...options\n    };\n\n    // Verifica se abbiamo il permesso\n    const hasPermission = await requestLocationPermission();\n    if (!hasPermission) {\n      logAppError('getDeviceLocation', 'Permesso di geolocalizzazione non concesso');\n      return null;\n    }\n\n    // Utilizzare l'implementazione appropriata in base alla piattaforma\n    if (isNativePlatform()) {\n      try {\n        // @ts-ignore - Import dinamico\n        const { Geolocation } = await import('@capacitor/core');\n        const position = await Geolocation.getCurrentPosition(defaultOptions);\n        \n        return {\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        };\n      } catch (error) {\n        logAppError('getDeviceLocation', {\n          message: 'Errore durante il recupero della posizione nativa',\n          details: error\n        });\n        return null;\n      }\n    } else {\n      // Implementazione browser\n      return new Promise((resolve) => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            resolve({\n              lat: position.coords.latitude,\n              lon: position.coords.longitude\n            });\n          },\n          (error) => {\n            let errorMessage = 'Errore sconosciuto durante il recupero della geolocalizzazione.';\n            switch (error.code) {\n              case error.PERMISSION_DENIED:\n                errorMessage = 'Permesso di geolocalizzazione negato dall\\'utente.';\n                break;\n              case error.POSITION_UNAVAILABLE:\n                errorMessage = 'Informazioni sulla posizione non disponibili.';\n                break;\n              case error.TIMEOUT:\n                errorMessage = 'Timeout durante il tentativo di recuperare la posizione.';\n                break;\n            }\n            \n            logAppError('getDeviceLocation', {\n              message: errorMessage,\n              code: error.code,\n              details: error.message\n            });\n            resolve(null);\n          },\n          defaultOptions\n        );\n      });\n    }\n  } catch (error) {\n    logAppError('getDeviceLocation', error);\n    return null;\n  }\n};\n\n/**\n * Visualizza un messaggio utente per guidare l'attivazione della geolocalizzazione\n * in base alla piattaforma (iOS, Android o browser)\n * @returns Stringa con istruzioni specifiche per la piattaforma\n */\nexport const getLocationPermissionHelp = (): string => {\n  if (!isNativePlatform()) {\n    // Browser web\n    return \"Per utilizzare la geolocalizzazione, accetta il permesso nel prompt del browser. Se l'hai negato in precedenza, puoi ripristinarlo dalle impostazioni del sito.\";\n  }\n  \n  const userAgent = navigator.userAgent.toLowerCase();\n  \n  if (userAgent.indexOf('iphone') > -1 || userAgent.indexOf('ipad') > -1 || userAgent.indexOf('ipod') > -1) {\n    // iOS\n    return \"Per attivare la geolocalizzazione su iOS, vai in Impostazioni > Privacy > Servizi di localizzazione > AVOWeather e seleziona 'Mentre usi l'app'.\";\n  } else {\n    // Android o altro\n    return \"Per attivare la geolocalizzazione su Android, vai in Impostazioni > App > AVOWeather > Autorizzazioni > Posizione e seleziona 'Consenti'.\";\n  }\n};\n"],"names":["isNativePlatform","_window$Capacitor","window","hasOwnProperty","Capacitor","requestLocationPermission","async","navigator","geolocation","Promise","resolve","getCurrentPosition","error","logAppError","message","code","details","timeout","Geolocation","Permissions","permissionStatus","query","name","state","request","getDeviceLocation","defaultOptions","_objectSpread","enableHighAccuracy","maximumAge","options","position","lat","coords","latitude","lon","longitude","errorMessage","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","getLocationPermissionHelp","userAgent","toLowerCase","indexOf"],"sourceRoot":""}